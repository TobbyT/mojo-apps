diff --git a/third_party/mojo/mojo/public/tools/download_shell_binary.py b/third_party/mojo/mojo/public/tools/download_shell_binary.py
index 470a6df..79631f1 100755
--- a/third_party/mojo/mojo/public/tools/download_shell_binary.py
+++ b/third_party/mojo/mojo/public/tools/download_shell_binary.py
@@ -10,22 +10,14 @@ import sys
 import tempfile
 import zipfile
 
-current_path = os.path.dirname(os.path.realpath(__file__))
-sys.path.insert(0, os.path.join(current_path, "..", "..", "..", "tools"))
-# pylint: disable=F0401
-import find_depot_tools
-
 if not sys.platform.startswith("linux"):
   print "Not supported for your platform"
   sys.exit(0)
 
+current_path = os.path.dirname(os.path.realpath(__file__))
 prebuilt_file_path = os.path.join(current_path, "prebuilt")
 stamp_path = os.path.join(prebuilt_file_path, "VERSION")
 
-depot_tools_path = find_depot_tools.add_depot_tools_to_path()
-gsutil_exe = os.path.join(depot_tools_path, "third_party", "gsutil", "gsutil")
-
-
 def download():
   version_path = os.path.join(current_path, "../VERSION")
   with open(version_path) as version_file:
@@ -42,31 +34,12 @@ def download():
   platform = "linux-x64"  # TODO: configurate
   basename = platform + ".zip"
 
-  gs_path = "gs://mojo/shell/" + version + "/" + basename
+  google_storage_url = "https://storage.googleapis.com"
+  url_path = google_storage_url + "/mojo/shell/" + version + "/" + basename
 
   with tempfile.NamedTemporaryFile() as temp_zip_file:
-    # We're downloading from a public bucket which does not need authentication,
-    # but the user might have busted credential files somewhere such as ~/.boto
-    # that the gsutil script will try (and fail) to use. Setting these
-    # environment variables convinces gsutil not to attempt to use these, but
-    # also generates a useless warning about failing to load the file. We want
-    # to discard this warning but still preserve all output in the case of an
-    # actual failure. So, we run the script and capture all output and then
-    # throw the output away if the script succeeds (return code 0).
-    env = os.environ.copy()
-    env["AWS_CREDENTIAL_FILE"] = ""
-    env["BOTO_CONFIG"] = ""
-    try:
-      subprocess.check_output(
-          [gsutil_exe,
-           "--bypass_prodaccess",
-           "cp",
-           gs_path,
-           temp_zip_file.name],
-          stderr=subprocess.STDOUT,
-          env=env)
-    except subprocess.CalledProcessError as e:
-      print e.output
+    retcode = subprocess.call(["curl", url_path], stdout=temp_zip_file)
+    if retcode:
       sys.exit(1)
 
     with zipfile.ZipFile(temp_zip_file.name) as z:
